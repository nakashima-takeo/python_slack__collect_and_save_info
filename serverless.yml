service: python-slack-task
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

custom:
  bucketName: slack-task-temp-bucket-nakashima-takeo

provider:
  name: aws
  runtime: python3.10
  region: ap-northeast-1
  iam:
    role:
      statements:
        # - Effect: Allow
        #   Action:
        #     - secretsmanager:GetSecretValue
        #   Resource:
        #     - "*"
        - Effect: Allow
          Action:
            - ssm:GetParameter
          Resource:
            - arn:aws:ssm:ap-northeast-1:652139491397:parameter/python_slack_app_token
        - Effect: Allow
          Action:
            - kms:Decrypt
          Resource:
            - arn:aws:kms:ap-northeast-1:652139491397:key/c9e4b218-8403-4d77-9aa3-713152bdfc50
        - Effect: Allow
          Action:
            - s3:CreateBucket
            - s3:DeleteBucket
            - s3:GetBucketLocation
            - s3:PutBucketPolicy
            - s3:ListBucket
          Resource:
            - "arn:aws:s3:::${self:custom.bucketName}"
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:ListObjects
          Resource:
            - "arn:aws:s3:::${self:custom.bucketName}/*"
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.py'
#    - '!exclude-me-dir/**'
#    - include-me.py
#    - include-me-dir/**

functions:
  save_slack_messages_to_s3:
    handler: src/get_slack_message.save_slack_messages_to_s3
    environment:
      REGION: ${self:provider.region}
      SOURCE_CHANNEL_NAME: annotation新卒
      REPORT_CHANNEL_NAME: nakashimatakeo通知
      SEARCH_WORDS: こんにちは,こんばんは,API
    timeout: 120
    events:
      # 日本時間で毎日12時に実行
      - schedule: cron(0 3 ? * MON-FRI *)
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

resources:
  Resources:
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: false
    S3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: S3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action: s3:GetObject
              Resource: "arn:aws:s3:::${self:custom.bucketName}/*"

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-python-requirements
